output$table <- DT::renderDataTable({
req(tidy())
DT::datatable(t_freq() , options = list(scrollX = T),  rownames = FALSE)
})
######## 4.4 tabla de frecuencias  ####
observeEvent(input$asktabla,{
output$tabla = renderUI({
dataTableOutput("table")
})
})
#
#  ##### 4.5 gráfico de palabras ####
###  tabla gráfico ####
tidy1 = reactive({
req(tidy())
tidy() %>%
dplyr::count(word, sort = T) %>%
filter(row_number() <= 250,
!word %in% conc1) %>%
# if(!is.null(concepto1)) (!word %in% conc1) else TRUE) %>%
mutate(angle = (90 * sample(c(0, 1),length(word),  replace = TRUE, prob = c(40, 60))))
})
colors = rainbow(150, start =  0, end = 0.25, s = 1, v = 0.8)
output$plot1 <- renderPlot({
# if(!is.null(tidyB()) | !is.null(tidyC()))
req(tidy())
set.seed(42)
ggplot(tidy1(), aes(label = word, size = n, angle = angle, color = factor(sample.int(150, nrow(tidy1()), replace = TRUE)) )) +
geom_text_wordcloud_area(rm_outside = TRUE, eccentricity = .35, shape = "square") +
scale_size_area(max_size = 80) +
theme_minimal()
})
output$nube = renderUI({
tagList(
h2("Palabras más frecuentes"),
plotOutput("plot1")
)
})
#### 4.6 tweets ejemplos ####
output$texto_tweets <- renderUI({
req(tidy())
tagList(
br(),
hr(),
h3("Tweets de ejemplo"),
h4(renderText({sample(tidy()$text[!duplicated(tidy()$text) & !is.na(tidy()$text)],1)})),
br(),
h4(renderText({sample(tidy()$text[!duplicated(tidy()$text) & !is.na(tidy()$text)],1)})),
br(),
h4( renderText({sample(tidy()$text[!duplicated(tidy()$text) & !is.na(tidy()$text)],1)})),
br()
)
})
#sample(corona$text[!duplicated(corona$text) & !is.na(corona$text)],1)
#####################################################################################################################################################
#####################################################################################################################################################
# #### concepto 3 está pendiente
##  x2 = reactive({
##    x = tidy_tweets$concepto3[tidy_tweets$concepto1 == input$concepto1 & tidy_tweets$concepto2 %in% input$concepto2]
##    x = as.character(unique(x))
##    x[!is.na(x)] -> x })
##
##  output$concepto3UI <- renderUI({
##    req(x2())
##    selectInput(inputId = "concepto2", h4("3er concepto de busqueda"),choices = x2() , multiple = T)
##  })
##
#
}
shinyApp(ui, server)
ui <- dashboardPagePlus(skin= "black",
dashboardHeaderPlus(disable = F,
titleWidth = 330,
title = tagList(
span(class = "logo-lg", "Tablero - COVID"),
img(src = "apple-icon-57x57.png", width = 30)),
enable_rightsidebar = F,
rightSidebarIcon = "gears"),
dashboardSidebar(
tags$head(tags$script(jscode)),
#tags$head(tags$style(csscode)),
collapsed = F,
width = 330
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
jscode <- HTML("
$(document).on('shiny:connected', function(event) {
$('.sidebar-toggle').on('click', function() {
if ($('body')[0].className != 'skin-blue sidebar-mini sidebar-collapse') {
$('#sidebarCollapsed').css('display', 'none')
} else {
$('#sidebarCollapsed').css('display', 'block')
}
})
});
")
csscode <- HTML("
.sidebar-mini.sidebar-collapse .content-wrapper {
margin-left: 0px !important;
}")
ui <- dashboardPagePlus(skin= "black", #sidebar_fullCollapse = T,
#   tags$head(tags$link(rel="shortcut icon", href="favicon.png")),
dashboardHeaderPlus(disable = F,
titleWidth = 330,
title = tagList(
span(class = "logo-lg", "Tablero - COVID"),
img(src = "apple-icon-57x57.png", width = 30)),
enable_rightsidebar = F,
rightSidebarIcon = "gears"),
dashboardSidebar(
tags$head(tags$script(jscode)),
#         tags$head(tags$style(csscode)),
collapsed = F,
width = 330,
column(12,
sidebarMenu(
menuItem(h3("1 Indicadores de gestión"), startExpanded = T,
menuSubItem(text = h4("1.2 Definiciones"), tabName = "TAB_ind_gest_def",icon = ""),        # 2
tabName = "TAB_ind_gest_datos"),                                                           # 1
menuItem(h3("2 Indicadores de resultado operativo"), startExpanded = T,
menuSubItem(text = h4("2.2 Definiciones"), tabName = "TAB_ind_result_def",icon = ""),      # 4
tabName = "TAB_ind_result_datos"),                                                         # 3
menuItem(h3("3 Rendimiento diario encuestador"), startExpanded = T,
tabName = "TAB_rend_diar",icon = ""),                                                      # 5
menuItem(h3("4 Esfuerzo operativo"), startExpanded = T,
tabName = "TAB_esfu_opera",icon = ""),                                                     # 6
menuItem(h3("5 Resumen de esfuerzo operativo"), startExpanded = T,
menuSubItem(text = h4("5.1 Esfuerzo versus logro"),  abName = "TAB_esf_vs_log",icon = ""), # 8
tabName = "TAB_res_esf_op",icon = ""),                                                     # 7
menuItem(h3("6 Distribución de intentos a lo largo del día"), startExpanded = T,
tabName = "TAB_intent_dia",icon = ""))                                                     # 9
)),
dashboardBody(
tabItems(
tabItem(tabName = "TAB_ind_gest_datos", h3("1. Indicadores de gestión \n  1.2 Resultados")),               #1
tabItem(tabName = "TAB_ind_gest_def", h3("1. Indicadores de gestión \n 1.1 Definiciones")),                #2
tabItem(tabName = "TAB_ind_result_datos", h3("2 Indicadores de resultado operativo  \n 2.1 Resultados")),  #3
tabItem(tabName = "TAB_ind_result_def", h3("2 Indicadores de resultado operativo  \n 2.2 Definiciones")),  #4
tabItem(tabName = "TAB_rend_diar", h3("3 Rendimiento diario encuestador")),                                #5
tabItem(tabName = "TAB_esfu_opera", h3("3 Rendimiento diario encuestador")),                               #6
tabItem(tabName = "TAB_res_esf_op", h3("3 Rendimiento diario encuestador")),                               #7
tabItem(tabName = "TAB_esf_vs_log", h3("3 Rendimiento diario encuestador")),                               #8
tabItem(tabName = "TAB_intent_dia", h3("3 Rendimiento diario encuestador"))                                #9
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
shinyApp(ui, server)
jscode <- HTML("
$(document).on('shiny:connected', function(event) {
$('.sidebar-toggle').on('click', function() {
if ($('body')[0].className != 'skin-blue sidebar-mini sidebar-collapse') {
$('#sidebarCollapsed').css('display', 'none')
} else {
$('#sidebarCollapsed').css('display', 'block')
}
})
});
")
csscode <- HTML("
.sidebar-mini.sidebar-collapse .content-wrapper {
margin-left: 0px !important;
}")
ui <- dashboardPagePlus(skin= "black", #sidebar_fullCollapse = T,
#   tags$head(tags$link(rel="shortcut icon", href="favicon.png")),
dashboardHeaderPlus(disable = F,
titleWidth = 330,
title = tagList(
span(class = "logo-lg", "Tablero - COVID"),
img(src = "apple-icon-57x57.png", width = 30)),
enable_rightsidebar = F,
rightSidebarIcon = "gears"),
dashboardSidebar(
tags$head(tags$script(jscode)),
#         tags$head(tags$style(csscode)),
collapsed = F,
width = 330,
column(12,
sidebarMenu(
menuItem(h3("1 Indicadores de gestión"), startExpanded = T,
menuSubItem(text = h4("1.2 Definiciones"), tabName = "TAB_ind_gest_def",icon = ""),        # 2
tabName = "TAB_ind_gest_datos"),                                                           # 1
menuItem(h3("2 Indicadores de resultado operativo"), startExpanded = T,
menuSubItem(text = h4("2.2 Definiciones"), tabName = "TAB_ind_result_def",icon = ""),      # 4
tabName = "TAB_ind_result_datos"),                                                         # 3
menuItem(h3("3 Rendimiento diario encuestador"), startExpanded = T,
tabName = "TAB_rend_diar",icon = ""),                                                      # 5
menuItem(h3("4 Esfuerzo operativo"), startExpanded = T,
tabName = "TAB_esfu_opera",icon = ""),                                                     # 6
menuItem(h3("5 Resumen de esfuerzo operativo"), startExpanded = T,
menuSubItem(text = h4("5.1 Esfuerzo versus logro"),  abName = "TAB_esf_vs_log",icon = ""), # 8
tabName = "TAB_res_esf_op",icon = ""),                                                     # 7
menuItem(h3("6 Distribución de intentos a lo largo del día"), startExpanded = T,
tabName = "TAB_intent_dia",icon = ""))                                                     # 9
)),
dashboardBody(
tabItems(
tabItem(tabName = "TAB_ind_gest_datos", h3("1. Indicadores de gestión \n  1.2 Resultados")),               #1
tabItem(tabName = "TAB_ind_gest_def", h3("1. Indicadores de gestión \n 1.1 Definiciones")),                #2
tabItem(tabName = "TAB_ind_result_datos", h3("2 Indicadores de resultado operativo  \n 2.1 Resultados")),  #3
tabItem(tabName = "TAB_ind_result_def", h3("2 Indicadores de resultado operativo  \n 2.2 Definiciones")),  #4
tabItem(tabName = "TAB_rend_diar", h3("3 Rendimiento diario encuestador")),                                #5
tabItem(tabName = "TAB_esfu_opera", h3("3 Rendimiento diario encuestador")),                               #6
tabItem(tabName = "TAB_res_esf_op", h3("3 Rendimiento diario encuestador")),                               #7
tabItem(tabName = "TAB_esf_vs_log", h3("3 Rendimiento diario encuestador")),                               #8
tabItem(tabName = "TAB_intent_dia", h3("3 Rendimiento diario encuestador"))                                #9
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp()
runApp()
shinydashboardPlus::shinydashboardPlusGallery()
library(shinyAce)
install.packages(c("styler","shinyAce"))
shinydashboardPlus::shinydashboardPlusGallery()
install.packages("shinyEffects")
shinydashboardPlus::shinydashboardPlusGallery()
shinydashboardPlus::shinydashboardPlusGallery()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (interactive()) {
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
shinyApp(
ui = dashboardPage(
dashboardHeader(
dropdownMenu(
type = "tasks",
badgeStatus = "danger",
taskItem(
inputId = "mytask",
value = 20,
color = "aqua",
text = "Click me!"
),
taskItem(
value = 40,
color = "green",
text = "Basic item"
)
)
),
dashboardSidebar(),
dashboardBody(),
title = "Dashboard example"
),
server = function(input, output) {
observeEvent(input$mytask, {
showModal(modalDialog(
title = "Important message",
"This is an important message!"
))
})
}
)
}
if (interactive()) {
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
shinydashboard::taskItem()
shinyApp(
ui = dashboardPage(
dashboardHeader(
dropdownMenu(
type = "tasks",
badgeStatus = "danger",
taskItem(
#inputId = "mytask",
value = 20,
color = "aqua",
text = "Click me!"
),
taskItem(
value = 40,
color = "green",
text = "Basic item"
)
)
),
dashboardSidebar(),
dashboardBody(),
title = "Dashboard example"
),
server = function(input, output) {
observeEvent(input$mytask, {
showModal(modalDialog(
title = "Important message",
"This is an important message!"
))
})
}
)
}
runApp()
runApp()
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"),
menuSubItem(text = h5("1.1 Resultados"), tabName = "TAB_ind_gest_datos",icon = "")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"),
menuSubItem(text = h5("1.1 Resultados"), tabName = "TAB_ind_gest_datos",icon = "")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- shinyUI(dashboardPage(
dashboardHeader(),
dashboardSidebar( tags$head(
tags$script(
HTML(#code for hiding sidebar tabs
"Shiny.addCustomMessageHandler('manipulateMenuItem1', function(message)
{
var aNodeList = document.getElementsByTagName('a');
for (var i = 0; i < aNodeList.length; i++)
{
if(aNodeList[i].getAttribute('data-toggle') == message.toggle && aNodeList[i].getAttribute('role') == message.role)
{
if(message.action == 'hide')
{
aNodeList[i].setAttribute('style', 'display: none;');
}
else
{
aNodeList[i].setAttribute('style', 'display: block;');
};
};
}
});"
)
)
)
),
dashboardBody(
useShinyjs(),
actionButton("h1","Hide toggle"),
actionButton("h2","Show toggle")
)
))
server <- shinyServer(function(input, output, session) {
observeEvent(input$h1,{
session$sendCustomMessage(type = "manipulateMenuItem1", message = list(action = "hide",toggle = "offcanvas", role = "button"))
})
observeEvent(input$h2,{
session$sendCustomMessage(type = "manipulateMenuItem1", message = list(action = "show",toggle = "offcanvas", role = "button"))
})
})
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
load("indicadores_gestion.html")
GET("indicadores_gestion.html")
ind_gestion.html <-content("indicadores_gestion.html")
ind_gestion.html <-includeHTML("indicadores_gestion.html")
runApp()
source("descarga_procesamiento_datos.R")
runApp()
runApp()
runApp()
runApp()
ind_gestion.html <-includeHTML("indicadores_gestion.html")
ind_gestion.html <-includeHTML("indicadores_gestion.html")
ind_result_op.html <-includeHTML("Indicadores_reuslt_operativo.html")
ind_gestion.html
runApp()
